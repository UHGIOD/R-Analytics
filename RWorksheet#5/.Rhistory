wholeRATING$Rating <- gsub("\\s*\\([^)]+\\)\\s*", "", wholeRATING$Rating)
wholeRATING$Vote_Count <- gsub(".*\\(([^)]+)\\)", "\\1", list_rating)
# Print the modified data frame
print(wholeRATING)
wholeRATING(1:50)
View(wholeRATING)
# Print the modified data frame
print(wholeRATING)
wholeRATING(1:50)
wholeRATING[1:50]
wholeRATING
wholeRATING[1:50]
new_Df <-wholeRATING[1:50]
library(stringr)
# Your data
list_rating <- scrape(session) %>%
html_nodes('span.ipc-rating-star.ipc-rating-star--base.ipc-rating-star--imdb.ratingGroup--imdb-rating') %>%
html_text()
wholeRATING <- as.data.frame(list_rating[1:50])
colnames(wholeRATING) <- "Rating"
# Extract Rating and Vote_Count using regular expressions
wholeRATING$Rating <- str_extract(wholeRATING$Rating, "\\d+\\.\\d+")
wholeRATING$Vote_Count <- str_extract(wholeRATING$Rating, "\\(.*\\)")
View(wholeRATING)
# Print the modified data frame
print(wholeRATING)
wholeRATING <- as.data.frame(list_rating[1:50])
colnames(wholeRATING) <- "Rating"
# Extracting Rating and Vote_Count using regular expressions
wholeRATING$Rating <- gsub("\\s*\\([^)]+\\)\\s*", "", wholeRATING$Rating)
wholeRATING$Vote_Count <- gsub(".*\\(([^)]+)\\)", "\\1", list_rating)
wholeRATING$Vote_Count <- gsub(".*\\(([^)]+)\\)", "\\1", list_rating[1:50])
new_Df <-wholeRATING[1:50]
new_Df <-wholeRATING
View(new_Df)
session <- bow(url, user_agent = "Educational")
session
title_show <- character(0)
list_year_ep <-character(0)
title_show <- scrape(session) %>%
html_nodes('h3.ipc-title__text') %>%
html_text
title_show_only <- as.data.frame(title_show[2:51])
title_show_only
colnames(title_show_only) <- "Rank"
#split the string(rank  title)
show_df <- strsplit(as.character(title_show_only$Rank),".",fixed = TRUE)
show_df <- data.frame(do.call(rbind,show_df))
#rename and delete columns
# deleting columns 3 and 4 since it duplicated the columns
show_df <- show_df[-c(4:3)]
#renaming column 1 and 2
colnames(show_df) <- c("Title","Rank")
show_df
#rename and delete columns
# deleting columns 3 and 4 since it duplicated the columns
show_df <- show_df[-c(4:3)]
#renaming column 1 and 2
colnames(show_df) <- c("Title","Rank")
show_df
list_year_ep <- scrape(session) %>%
html_nodes('span.sc-479faa3c-8.bNrEFi.cli-title-metadata-item
') %>%
html_text
years_only <- c()
for (i in seq(1, length(list_year_ep), by = 3)) {
years_only <- c(years_only, list_year_ep[i])
}
Year <- years_only[1:50]
Year
ep_only <- c()
for (i in seq(2, length(list_year_ep), by = 3)) {
ep_only <- c(ep_only, list_year_ep[i])
}
Episode <- ep_only[1:50]
Episode
df_title_ep <- data.frame(Year,Episode)
df_title_ep
list_rating <- scrape(session) %>%
html_nodes('span.ipc-rating-star.ipc-rating-star--base.ipc-rating-star--imdb.ratingGroup--imdb-rating') %>%
html_text()
wholeRATING <- as.data.frame(list_rating[1:50])
colnames(wholeRATING) <- "Rating"
# Extracting Rating and Vote_Count using regular expressions
wholeRATING$Rating <- gsub("\\s*\\([^)]+\\)\\s*", "", wholeRATING$Rating)
wholeRATING$Vote_Count <- gsub(".*\\(([^)]+)\\)", "\\1", list_rating[1:50])
df_rating_vote <-wholeRATING
df_rating_vote <-wholeRATING
df_rating_vote
View(df_rating_vote)
View(df_title_ep)
whole_combined_df <- merge(merge(show_df, df_title_ep, by = "Year"), df_rating_vote, by = "Ratings")
whole_combined_df <- merge(show_df, df_title_ep, df_rating_vote)
whole_combined_df <- merge(merge(show_df, df_title_ep, df_rating_vote, by = "Ratings")
whole_combined_df <- merge(merge(show_df, df_title_ep, df_rating_vote, by = "Ratings"))
whole_combined_df <- merge(merge(show_df, df_title_ep, df_rating_vote, by = "Ratings"))
show_df
merged_df <- merge(show_df, df_title_ep, by = "Title")
merged_df <- merge(merged_df, df_rating_vote, by = "Title")
merged_df <- merge(show_df, df_title_ep, by = "Title")
merged_df <- merge(show_df, df_title_ep, by = "Title")
merged_df <- merge(show_df, df_title_ep, by.x = "Title", by.y = "Title")
merged_df <- merge(merged_df, df_rating_vote, by.x = "Title", by.y = "Title")
Title
View(show_df)
View(df_title_ep)
merged_df <- merge(show_df, df_title_ep, by.x = "Title", by.y = "Year")
View(merged_df)
merged_df <- merge(show_df, df_title_ep, by.x = "Title", by.y = "Rating")
merged_df <- merge(show_df, df_title_ep, by.x = "Title", by.y = "Rating")
merged_df <- merge(show_df, df_title_ep, by.x = "Title", by.y = "Rating")
merged_df <- merge(show_df, df_title_ep, by.x = "Title", by.y = "Rank")
Rating
View(df_title_ep)
merged_df <- merge(show_df, df_title_ep, by.x = "Title", by.y = "Year")
View(df_rating_vote)
merged_df <- merge(show_df, df_rating_vote, by.x = "Title", by.y = "Rating")
View(merged_df)
View(df_rating_vote)
merged_df <- merge(show_df, df_rating_vote, by.x = "Title", by.y = "Rating")
merged_df <- merge(show_df, df_rating_vote, by.x = "Title", by.y = "Rating")
View(merged_df)
# Print the combined data frame
print(merged_df)
colnames(df_title_ep) <- c("Year Released","Number Of Episodes")
df_title_ep <- data.frame(Year,Episode)
df_title_ep
df_rating_vote
merged_df <- merge(show_df, df_title_ep, by.x = "Title", by.y = "Title")
merged_df <- merge(show_df, df_title_ep, by = "Title")
View(session)
View(split_counts)
View(split_df)
wholeRATING <-  list_rating[1:50]
colnames(wholeRATING) <- "Rating"
as.data.frame
as.data.frame
wholeRATING <- as.data.frame(list_rating[1:50])
colnames(wholeRATING) <- "Rating"
# Extracting Rating and Vote_Count using regular expressions
wholeRATING$Rating <- gsub("\\s*\\([^)]+\\)\\s*", "", wholeRATING$Rating)
wholeRATING$Vote_Count <- gsub(".*\\(([^)]+)\\)", "\\1", list_rating[1:50])
df_rating_vote <-wholeRATING
colnames(df_rating_vote) <- c("Rating","Vote Count")
df_rating_vote
merged_df <- merge(show_df, df_title_ep, by = "Title")
# Merge merged_df and df_rating_vote
final_df <- merge(merged_df, df_rating_vote, by = "Title")
title_rank_data <- data.frame(
Title = c('Breaking Bad', 'Planet Earth II', 'Planet Earth', 'Band of Brothers', 'Chernobyl', 'The Wire', 'Avatar: The Last Airbender', 'Blue Planet II', 'The Sopranos', 'Cosmos: A Spacetime Odyssey',
'Cosmos', 'Our Planet', 'Game of Thrones', 'The World at War', 'Rick and Morty', 'Bluey', 'Fullmetal Alchemist Brotherhood', 'The Last Dance', 'Life', 'The Twilight Zone',
'Sherlock', 'The Vietnam War', 'Batman: The Animated Series', 'Attack on Titan', 'Scam 1992: The Harshad Mehta Story', 'The Office', 'Arcane', 'The Blue Planet', 'Better Call Saul',
'Human Planet', 'Firefly', 'Frozen Planet', "Clarkson's Farm", 'Death Note', 'Only Fools and Horses', 'Hunter x Hunter', 'The Civil War', 'True Detective', 'Seinfeld',
'The Beatles: Get Back', 'Dekalog', 'Sahsiyet', 'Fargo', 'Cowboy Bebop', 'Gravity Falls', 'Nathan for You', 'Last Week Tonight with John Oliver', 'When They See Us', 'Succession',
'Apocalypse: La 2ème guerre mondiale'),
Rank = 1:50
)
title_rank_data
View(title_rank_data)
title_rank_data <- data.frame(
Rank = 1:50
,
Title = c('Breaking Bad', 'Planet Earth II', 'Planet Earth', 'Band of Brothers', 'Chernobyl', 'The Wire', 'Avatar: The Last Airbender', 'Blue Planet II', 'The Sopranos', 'Cosmos: A Spacetime Odyssey',
'Cosmos', 'Our Planet', 'Game of Thrones', 'The World at War', 'Rick and Morty', 'Bluey', 'Fullmetal Alchemist Brotherhood', 'The Last Dance', 'Life', 'The Twilight Zone',
'Sherlock', 'The Vietnam War', 'Batman: The Animated Series', 'Attack on Titan', 'Scam 1992: The Harshad Mehta Story', 'The Office', 'Arcane', 'The Blue Planet', 'Better Call Saul',
'Human Planet', 'Firefly', 'Frozen Planet', "Clarkson's Farm", 'Death Note', 'Only Fools and Horses', 'Hunter x Hunter', 'The Civil War', 'True Detective', 'Seinfeld',
'The Beatles: Get Back', 'Dekalog', 'Sahsiyet', 'Fargo', 'Cowboy Bebop', 'Gravity Falls', 'Nathan for You', 'Last Week Tonight with John Oliver', 'When They See Us', 'Succession',
'Apocalypse: La 2ème guerre mondiale')
)
title_rank_data
merged_df <- merge(df_title_rank, df_title_ep, by = "Title")
merged_df <- merge(show_df, df_title_ep, by = "Title")
# Merge merged_df and df_rating_vote on their common column "Rank"
final_df <- merge(merged_df, df_rating_vote, by = "Rank")
merged_df <- merge(show_df, df_title_ep, by = "Title")
# Merge merged_df and df_rating_vote using "Rank" column
final_df <- merge(merged_df, df_rating_vote, by.x = "Rank", by.y = "Rank")
# Print the final dataframe
print(final_df)
merged_df <- merge(show_df, df_title_ep, by = "Rank")
merged_df <- merge(show_df, df_title_ep, by = "Rank")
View(show_df)
View(show_df)
#renaming column 1 and 2
colnames(show_df) <- c("Rank","Title")
show_df
merged_df <- merge(show_df, df_title_ep, by = "Title")
merged_df <- merge(show_df, df_title_ep, by = "Rank")
merged_df <- merge(show_df, df_title_ep, by.x = "Rank")
merged_df <- merge(show_df, df_title_ep, by.x = "Rank", by.y = "Title")
merged_df <- merge(show_df, df_title_ep, by.x = "Rank", by.y = "Year")
# Merge merged_df and df_rating_vote on their common column "Rank"
final_df <- merge(merged_df, df_rating_vote, by = "Rank")
merged_df <- merge(df_title_rank, df_title_ep, by = "Title")
# Merge merged_df and df_rating_vote on their common column "Title"
final_df <- merge(merged_df, df_rating_vote, by = "Title")
df_show
merged_df <- merge(df_show, df_title_ep, by = "Title")
merged_df <- merge(show_df, df_title_ep, by = "Title")
# Merge merged_df and df_rating_vote on their common column "Title"
final_df <- rbind(show_df, df_title_ep, df_rating_vote)
final_df <- rbind(show_df, df_rating_vote, df_title_ep)
final_df <- rbind(show_df, df_title_ep,df_rating_vote )
show_df
df_title_ep
df_rating_vote
final_df <- cbind(show_df, df_title_ep,df_rating_vote )
final_df
View(final_df)
final_df <- cbind(show_df, df_rating_vote,df_title_ep )
final_df
View(final_df)
df_title_ep <- data.frame(Episode,Year)
colnames(df_title_ep) <- c("Year Released","Number Of Episodes")
df_title_ep
colnames(df_title_ep) <- c("Number Of Episodes","Year Released")
df_title_ep
final_df <- cbind(show_df, df_rating_vote,df_title_ep )
final_df
View(final_df)
list_year_ep <- scrape(session) %>%
html_nodes('span.sc-479faa3c-8.bNrEFi.cli-title-metadata-item
') %>%
html_text
years_only <- c()
for (i in seq(1, length(list_year_ep), by = 3)) {
years_only <- c(years_only, list_year_ep[i])
}
Year <- years_only[1:50]
Year
ep_only <- c()
for (i in seq(2, length(list_year_ep), by = 3)) {
ep_only <- c(ep_only, list_year_ep[i])
}
Episode <- ep_only[1:50]
Episode
df_title_ep <- data.frame(Episode,Year)
colnames(df_title_ep) <- c("Number Of Episodes","Year Released")
df_title_ep
list_rating <- scrape(session) %>%
html_nodes('span.ipc-rating-star.ipc-rating-star--base.ipc-rating-star--imdb.ratingGroup--imdb-rating') %>%
html_text()
wholeRATING <- as.data.frame(list_rating[1:50])
colnames(wholeRATING) <- "Rating"
# Extracting Rating and Vote_Count using regular expressions
wholeRATING$Rating <- gsub("\\s*\\([^)]+\\)\\s*", "", wholeRATING$Rating)
wholeRATING$Vote_Count <- gsub(".*\\(([^)]+)\\)", "\\1", list_rating[1:50])
df_rating_vote <-wholeRATING
colnames(df_rating_vote) <- c("Rating","Vote Count")
df_rating_vote
final_df <- cbind(show_df, df_rating_vote,df_title_ep )
final_df
View(final_df)
View(final_df)
# Load the required libraries
library(rvest)
library(httr)
library(dplyr)
library(polite)
library(kableExtra)
polite::use_manners(save_as = 'polite_scrape.R')
detach("package:dplyr", unload = TRUE)
library(dplyr)
detach("package:kableExtra", unload = TRUE)
library(kableExtra)
# Load the required libraries
library(rvest)
library(httr)
library(dplyr)
library(polite)
library(kableExtra)
polite::use_manners(save_as = 'polite_scrape.R')
# Load the required libraries
library(rvest)
library(httr)
library(dplyr)
library(polite)
library(kableExtra)
polite::use_manners(save_as = 'polite_scrape.R')
url <- 'https://m.imdb.com/chart/toptv/?ref_=nv_tvv_250'
session <- bow(url, user_agent = "Educational")
session
title_show <- character(0)
list_year_ep <-character(0)
title_show <- scrape(session) %>%
html_nodes('h3.ipc-title__text') %>%
html_text
title_show_only <- as.data.frame(title_show[2:51])
title_show_only
colnames(title_show_only) <- "Rank"
#split the string(rank  title)
show_df <- strsplit(as.character(title_show_only$Rank),".",fixed = TRUE)
show_df <- data.frame(do.call(rbind,show_df))
#rename and delete columns
# deleting columns 3 and 4 since it duplicated the columns
show_df <- show_df[-c(4:3)]
#renaming column 1 and 2
colnames(show_df) <- c("Rank","Title")
show_df
list_year_ep <- scrape(session) %>%
html_nodes('span.sc-479faa3c-8.bNrEFi.cli-title-metadata-item
') %>%
html_text
years_only <- c()
for (i in seq(1, length(list_year_ep), by = 3)) {
years_only <- c(years_only, list_year_ep[i])
}
Year <- years_only[1:50]
Year
ep_only <- c()
for (i in seq(2, length(list_year_ep), by = 3)) {
ep_only <- c(ep_only, list_year_ep[i])
}
Episode <- ep_only[1:50]
Episode
df_title_ep <- data.frame(Episode,Year)
colnames(df_title_ep) <- c("Number Of Episodes","Year Released")
df_title_ep
list_rating <- scrape(session) %>%
html_nodes('span.ipc-rating-star.ipc-rating-star--base.ipc-rating-star--imdb.ratingGroup--imdb-rating') %>%
html_text()
wholeRATING <- as.data.frame(list_rating[1:50])
colnames(wholeRATING) <- "Rating"
# Extracting Rating and Vote_Count using regular expressions
wholeRATING$Rating <- gsub("\\s*\\([^)]+\\)\\s*", "", wholeRATING$Rating)
wholeRATING$Vote_Count <- gsub(".*\\(([^)]+)\\)", "\\1", list_rating[1:50])
df_rating_vote <-wholeRATING
colnames(df_rating_vote) <- c("Rating","Vote Count")
df_rating_vote
final_df <- cbind(show_df, df_rating_vote,df_title_ep )
final_df
# Print the final dataframe
print(final_df)
View(final_df)
library(rvest)
library(httr)
library(dplyr)
library(kableExtra)
polite::use_manners(save_as = 'polite_scrape.R')
remove.packages("kableExtra")
remove.packages("kableExtra")
install.packages("kableExtra")
install.packages("kableExtra")
update.packages("rmarkdown")
update.packages("rmarkdown")
update.packages("rmarkdown")
update.packages("rmarkdown")
update.packages("rmarkdown")
pkg_deps <- package.dependencies("kableExtra")
restartSession()
url <- 'https://m.imdb.com/chart/toptv/?ref_=nv_tvv_250'
session <- bow(url, user_agent = "Educational")
session
title_show <- character(0)
list_year_ep <-character(0)
title_show <- scrape(session) %>%
html_nodes('h3.ipc-title__text') %>%
html_text
library(rvest)
library(httr)
library(dplyr)
library(polite)
library(rvest)
library(httr)
library(dplyr)
library(polite)
polite::use_manners(save_as = 'polite_scrape.R')
url <- 'https://m.imdb.com/chart/toptv/?ref_=nv_tvv_250'
session <- bow(url, user_agent = "Educational")
session <- bow(url, user_agent = "Educational")
session
title_show <- character(0)
list_year_ep <-character(0)
title_show <- scrape(session) %>%
html_nodes('h3.ipc-title__text') %>%
html_text
title_show <- scrape(session) %>%
html_nodes('h3.ipc-title__text') %>%
html_text
title_show_only <- as.data.frame(title_show[2:51])
colnames(title_show_only) <- "Rank"
show_df <- strsplit(as.character(title_show_only$Rank),".",fixed = TRUE)
show_df <- data.frame(do.call(rbind,show_df))
View(show_df)
show_df <- show_df[-c(3:5)]
View(show_df)
colnames(show_df) <- c("Rank","Title")
View(show_df)
list_year_ep <- scrape(session) %>%
html_nodes('span.sc-479faa3c-8.bNrEFi.cli-title-metadata-item
') %>%
html_text
years_only <- c()
for (i in seq(1, length(list_year_ep), by = 3)) {
years_only <- c(years_only, list_year_ep[i])
}
Year <- years_only[1:50]
Year
Year <- years_only[1:50]
ep_only <- c()
for (i in seq(2, length(list_year_ep), by = 3)) {
ep_only <- c(ep_only, list_year_ep[i])
}
Episode <- ep_only[1:50]
df_title_ep <- data.frame(Episode,Year)
colnames(df_title_ep) <- c("Number Of Episodes","Year Released")
list_rating <- scrape(session) %>%
html_nodes('span.ipc-rating-star.ipc-rating-star--base.ipc-rating-star--imdb.ratingGroup--imdb-rating') %>%
html_text()
wholeRATING <- as.data.frame(list_rating[1:50])
colnames(wholeRATING) <- "Rating"
wholeRATING$Rating <- gsub("\\s*\\([^)]+\\)\\s*", "", wholeRATING$Rating)
wholeRATING$Vote_Count <- gsub(".*\\(([^)]+)\\)", "\\1", list_rating[1:50])
df_rating_vote <- wholeRATING
colnames(df_rating_vote) <- c("Rating","Vote Count")
final_df <- cbind(show_df, df_rating_vote,df_title_ep )
final_df
View(final_df)
tv_show_urls <- c(
"https://www.imdb.com/title/tt0081846/reviews",  #COSMOS
"https://www.imdb.com/title/tt0903747/reviews", #BREAKING BAD
"https://www.imdb.com/title/tt0185906/reviews", # BAND OF BROTHERS
"https://www.imdb.com/title/tt7366338/reviews", #CHERNOBYL
"https://www.imdb.com/title/tt0417299/reviews" #Avatar: The Last Airbender
)
all_reviews <- list()
for (url in tv_show_urls) {
# Read HTML content
page <- read_html(url)
reviewers_name <- page %>% html_nodes(".display-name-link") %>% html_text()
dates <- page %>% html_nodes("span.review-date") %>% html_text()
user_ratings <- page %>% html_nodes("span.rating-other-user-rating") %>% html_text()
text_reviews <- page %>% html_nodes("div.text") %>% html_text()
# Create a data frame
reviews_df <- data.frame(
Reviewer_Name = reviewers_name[1:5],
Date = dates[1:5],
User_Rating = user_ratings[1:5],
Text_Review = text_reviews[1:5],
stringsAsFactors = FALSE
)
all_reviews[[url]] <- reviews_df
}
for (url in tv_show_urls) {
# Read HTML content
page <- read_html(url)
reviewers_name <- page %>% html_nodes(".display-name-link") %>% html_text()
dates <- page %>% html_nodes("span.review-date") %>% html_text()
user_ratings <- page %>% html_nodes("span.rating-other-user-rating") %>% html_text()
text_reviews <- page %>% html_nodes("div.text") %>% html_text()
# Create a data frame
reviews_df <- data.frame(
Reviewer_Name = reviewers_name[1:5],
Date = dates[1:5],
User_Rating = user_ratings[1:5],
Text_Review = text_reviews[1:5],
stringsAsFactors = FALSE
)
all_reviews[[url]] <- reviews_df
}
final_reviews_df <- do.call(rbind, all_reviews)
colnames(final_reviews_df) <- c("Name", "Date of Review", "User Rating", "Text Reviews")
rownames(final_reviews_df) <- NULL
final_reviews_df
View(final_reviews_df)
View(final_reviews_df)
View(final_reviews_df)
library(rvest)
library(httr)
library(dplyr)
library(polite)
polite::use_manners(save_as = 'polite_scrape.R')
detach("package:polite", unload = TRUE)
library(polite)
library(polite)
polite::use_manners(save_as = 'polite_scrape.R')
polite::use_manners(save_as = 'polite_scrape.R')
library(rvest)
library(httr)
library(dplyr)
library(polite)
install.packages("polite")
install.packages("polite")
install.packages("polite")
library(polite)
library(polite)
polite::use_manners(save_as = 'polite_scrape.R')
library(rvest)
library(httr)
library(dplyr)
library(polite)
polite::use_manners(save_as = 'polite_scrape.R')
url <- 'https://m.imdb.com/chart/toptv/?ref_=nv_tvv_250'
polite::use_manners(save_as = ' Documents/Worksheet#5/polite_scrape.R')
install.packages(c("dplyr", "ggplot2", "markdown", "tinytex"))
install.packages(c("dplyr", "ggplot2", "markdown", "tinytex"))
install.packages(c("dplyr", "ggplot2", "markdown", "tinytex"))
library(rvest)
library(httr)
library(dplyr)
library(polite)
polite::use_manners(save_as = ' Documents/Worksheet#5/polite_scrape.R')
url <- 'https://m.imdb.com/chart/toptv/?ref_=nv_tvv_250'
polite::use_manners(save_as = 'polite_scrape.R')
library(dplyr)
library(dplyr)
install.packages("vctrs")
install.packages("vctrs")
install.packages("vctrs")
library(dplyr)
restartSession()
update.packages(ask = FALSE)
